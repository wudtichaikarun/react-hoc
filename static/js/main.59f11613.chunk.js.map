{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getDisplayName","WrappedComponent","displayName","name","ProtectedComponent","articles","this","props","fetchData","react_default","a","createElement","map","_ref","id","title","key","Component","API_ENDPOINT","EnhancedComponent","Enhance","_Component3","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","inherits","createClass","value","endpoint","_this2","Promise","resolve","reject","Error","then","setState","catch","error","console","message","assign","hoistNonReactStatic","_Component2","nextProps","log","logProps","_Component","isLogin","credential","rest","objectWithoutProperties","auth","forAuth","App","toggleLogin","_this3","prevState","email","accessToken","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59f11613.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nfunction forAuth(WrappedComponent) {\n  class Enhance extends Component {\n    static displayName = `ForAuth(${getDisplayName(WrappedComponent)})`;\n\n    render() {\n      const props = this.props;\n      const { isLogin, credential, ...rest } = props;\n      const auth = { isLogin, credential };\n\n      return props.isLogin ? <WrappedComponent {...rest} auth={auth} /> : null;\n    }\n  }\n\n  return hoistNonReactStatic(Enhance, WrappedComponent);\n}\n\nfunction logProps(WrappedComponent) {\n  class Enhance extends Component {\n    static displayName = `LogProps(${getDisplayName(WrappedComponent)})`;\n\n    componentWillReceiveProps(nextProps) {\n      console.log('Prev Props', this.props);\n      console.log('Next Props', nextProps);\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatic(Enhance, WrappedComponent);\n}\n\nfunction fetchApi(endpoint) {\n  return new Promise((resolve, reject) => {\n    if (!endpoint) return reject(new Error('Endpoint is required.'));\n\n    return resolve({\n      articles: [\n        { id: 1, title: 'Article#1' },\n        { id: 2, title: 'Article#2' },\n        { id: 3, title: 'Article#3' }\n      ]\n    });\n  });\n}\n\nfunction fetchData(WrappedComponent) {\n  class Enhance extends Component {\n    static displayName = `FetchData(${getDisplayName(WrappedComponent)})`;\n\n    state = {\n      fetchData: {}\n    };\n\n    componentDidMount() {\n      fetchApi(WrappedComponent.API_ENDPOINT)\n        .then(fetchData => this.setState({ fetchData }))\n        .catch(error => console.error(error.message));\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return hoistNonReactStatic(Enhance, WrappedComponent);\n}\n\nclass ProtectedComponent extends Component {\n  static API_ENDPOINT = '/articles';\n\n  render() {\n    const {\n      fetchData: { articles }\n    } = this.props;\n\n    return (\n      <ul>\n        {articles && articles.map(({ id, title }) => <li key={id}>{title}</li>)}\n      </ul>\n    );\n  }\n}\n\nconst EnhancedComponent = fetchData(logProps(forAuth(ProtectedComponent)));\n\nclass App extends Component {\n  state = {\n    isLogin: false,\n    credential: {}\n  };\n\n  toggleLogin = () => {\n    this.setState(prevState => {\n      const { isLogin } = prevState;\n\n      if (isLogin) return { isLogin: false, credential: {} };\n\n      return {\n        isLogin: true,\n        credential: { email: 'romantic.com', accessToken: 'token' }\n      };\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.toggleLogin}>Toggle</button>\n        <EnhancedComponent {...this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}